Description:  Este template foi puramente insipirado no Well-Architected Framework da AWS,
  visando suprir as necessidades do projeto-desafio para o Itau Unibanco.
  1-) A stack vai criar uma VPC, com duas subnets publicas e duas subnets privadas, distribuidas
  em duas AZ's.
  2-) Pra tornar as duas primeiras subnets publicas, a stack vai entregar um IGW. Este, apenas
  atrelado na Routing Table Publica.
  3-) Para o egress, vamos utilizar um NAT GW em cada subnet publica. Assim nao temos um unico ponto de falha.
  3.1-) Cada Routing Table das subnets privadas vai ter o destination 0.0.0.0/0 pro seu respectivo nat-gw (tem dois)
  4-) Vamos criar uma pequena Bastion em cada subnet publica, para permitir o acesso SSH e, a partir deste,
  poder cair em alguma outra EC2 em subnets privadas. ~~IMPORTANTE~~ Aqui sera necessario um key-pair.
  5-) Criaremos um VPC Endpoint (GW) para o servico do S3, ja que nao queremos acessar os buckets pela internet.
  ---- IMPORTANTE - Explicacao continua no GitHub

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Configuracao do Ambiente"
        Parameters:
          - EnvironmentName
      -
        Label:
          default: "Configuracao da VPC"
        Parameters:
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
      -
        Label:
          default: "Configuracao das Bastions"
        Parameters:
          - EC2KeyPair
          - InstanceSize
          - PublicIP
      -
        Label:
          default: "Configuracao da EC2 Fleet com CodeCommit"
        Parameters:
          - FleetInstanceSize
          - InstanceCount
      -
        Label:
          default: "Configuracao do CodePipeline com GitHub (CodeDeploy eh automatico)"
        Parameters:
          - BranchName
          - RepositoryName
          - GitHubOwner

    ParameterLabels:
      EnvironmentName:
        default: "Qual o nome do seu ambiente?"
      VpcCIDR:
        default: "Qual o CIDR da sua VPC?"
      PublicSubnet1CIDR:
        default: "Qual o CIDR da sua Subnet Publica da AZ1?"
      PublicSubnet2CIDR:
        default: "Qual o CIDR da sua Subnet Publica da AZ2?"
      PrivateSubnet1CIDR:
        default: "Qual o CIDR da sua Subnet Privada da AZ1?"
      PrivateSubnet2CIDR:
        default: "Qual o CIDR da sua Subnet Privada da AZ2?"
      EC2KeyPair:
        default: "Selecione o key-pai previamente criado"
      InstanceSize:
        default: "Selecione o tipo de instancia"
      PublicIP:
        default: "Defina o seu CIDR de Ingress para o SSH"
      FleetInstanceSize:
        default: "Selecione o tipo de instancia para a ec2 fleet da sua app"
      InstanceCount:
        default: "Defina a quantidade de instancias para a ec2 fleet da sua app"
      BranchName:
        default: "Qual a branch do seu piloto?"
      RepositoryName:
        default: "Qual o nome do repo?"
      GitHubOwner:
        default: "Qual o owner do repo?"

Parameters:
  EnvironmentName:
    Description: Um nome ou label para lastrear o seu ambiente completamente
    Type: String

  VpcCIDR:
    Description: CIDR da sua VPC (pode aceitar o Default)
    Type: String
    Default: 172.16.0.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Valor precisa estar nesse formato <ip address>/<cidr>

  PublicSubnet1CIDR:
    Description: CIDR da sua Subnet Publica da AZ1 (pode aceitar o Default)
    Type: String
    Default: 172.16.0.0/26
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Valor precisa estar nesse formato <ip address>/<cidr>

  PublicSubnet2CIDR:
    Description: CIDR da sua Subnet Publica da AZ2 (pode aceitar o Default)
    Type: String
    Default: 172.16.0.64/26
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Valor precisa estar nesse formato <ip address>/<cidr>

  PrivateSubnet1CIDR:
    Description: CIDR da sua Subnet Privada da AZ1 (pode aceitar o Default)
    Type: String
    Default: 172.16.0.128/26
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Valor precisa estar nesse formato <ip address>/<cidr>

  PrivateSubnet2CIDR:
    Description: CIDR da sua Subnet Privada da AZ2 (pode aceitar o Default)
    Type: String
    Default: 172.16.0.192/26
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Valor precisa estar nesse formato <ip address>/<cidr>

  EC2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Selecione o ec2 key-pair para as suas Bastions

  InstanceSize:
    Type: String
    Description: Selecione o instance size das Bastions
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large

  PublicIP:
    Description: CIDR de Inbound pro SSH (ex., 12.34.56.78/32)
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Valor precisa estar nesse formato <ip address>/<cidr>

  FleetInstanceSize:
    Type: String
    Description: Selecione o instance size da EC2 Fleet
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large

  InstanceCount:
    Description: Numero de instancias Amazon 2 EC2 (entre 1 e 2).
    Type: Number
    Default: 1
    ConstraintDescription: Valor precisa estar entre 1 e 2
    MinValue: 1
    MaxValue: 2

  BranchName:
    Description: GitHub branch name
    Type: String
    Default: master
  RepositoryName:
    Description: GitHub repository name
    Type: String
    Default: desafio-itau-simple-app
  GitHubOwner:
    Type: String
    Default: cintiahy1990

Conditions: 
  Fleet1: !Equals [ !Ref InstanceCount, 1 ]
  Fleet2: !Equals [ !Ref InstanceCount, 2 ]


# aws ssm get-parameters --names /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 --region <region>
Mappings:
  Linux:
    us-east-1:
      "AMI": "ami-0fc61db8544a617ed"
    us-east-2:
      "AMI": "ami-0e01ce4ee18447327"
    us-west-1:
      "AMI": "ami-09a7fe78668f1e2c0"
    us-west-2:
      "AMI": "ami-0ce21b51cb31a48b8"
    sa-east-1:
      "AMI": "ami-0b032e878a66c3b68"


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  LinuxBastionHost1:
    Type: AWS::EC2::Instance
    DependsOn:
      - LinuxSSHSecurityGroup
    Properties:
      ImageId: !FindInMap [Linux, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceSize
      KeyName: !Ref EC2KeyPair
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion 1 (AZ1)
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: LinuxSSHSecurityGroup
          SubnetId:
            Ref: PublicSubnet1

  LinuxBastionHost2:
    Type: AWS::EC2::Instance
    DependsOn:
      - LinuxSSHSecurityGroup
    Properties:
      ImageId: !FindInMap [Linux, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceSize
      KeyName: !Ref EC2KeyPair
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion 2 (AZ2)
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: LinuxSSHSecurityGroup
          SubnetId:
            Ref: PublicSubnet2

  LinuxSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite o inbound de SSH para as Bastions
      GroupName: linux-bastion-ssh
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref PublicIP
  
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: '{
       "Version":"2012-10-17",
       "Statement":[{
         "Effect":"Allow",
         "Principal": "*",
         "Action":["s3:*"],
         "Resource":["arn:aws:s3:::*/*"]
       }]
      }'
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC

  EC2FleetRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
      RoleName: EC2CodeDeployFleetRole
  
  EC2FleetInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - Ref: EC2FleetRole

  LinuxEC2Fleet1:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              ruby: []
          files:
            /home/ec2-user/install:
              source: !Join [ "", ["https://aws-codedeploy-", !Ref "AWS::Region", ".s3.amazonaws.com/latest/install" ]]
              mode: "000755"
          commands:
            00-install-agent:
              command: ./install auto
              cwd: /home/ec2-user/
            01-cfn-signal:
              command: !Join [ "", ["/opt/aws/bin/cfn-signal -e 0 --stack ", !Ref "AWS::StackName", " --resource LinuxEC2Fleet1 --region ", !Ref "AWS::Region" ]]
    DependsOn:
      - FleetSSHSecurityGroup
    Properties:
      ImageId: !FindInMap [Linux, !Ref "AWS::Region", AMI]
      InstanceType: !Ref FleetInstanceSize
      KeyName: !Ref EC2KeyPair
      UserData:
        Fn::Base64: !Join ["", [
                        "#!/bin/bash\n",
                        "yum -y update\n",
                        "yum -y install aws-cfn-bootstrap\n",
                        "/opt/aws/bin/cfn-init -v",
                        " --stack ", !Ref "AWS::StackName",
                        " --resource LinuxEC2Fleet1",
                        " --region ", !Ref "AWS::Region", 
                        "\n"
                    ]]
      IamInstanceProfile: !Ref EC2FleetInstanceProfile
      Tags:
        - Key: Name
          Value: EC2 Fleet
      NetworkInterfaces:
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          GroupSet:
            - Ref: FleetSSHSecurityGroup
          SubnetId:
            Ref: PrivateSubnet1

  LinuxEC2Fleet2:
    Type: AWS::EC2::Instance
    Condition: Fleet2
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              ruby: []
          files:
            /home/ec2-user/install:
              source: !Join [ "", ["https://aws-codedeploy-", !Ref "AWS::Region", ".s3.amazonaws.com/latest/install" ]]
              mode: "000755"
          commands:
            00-install-agent:
              command: ./install auto
              cwd: /home/ec2-user/
            01-cfn-signal:
              command: !Join [ "", ["/opt/aws/bin/cfn-signal -e 0 --stack ", !Ref "AWS::StackName", " --resource LinuxEC2Fleet2 --region ", !Ref "AWS::Region" ]]
    DependsOn:
      - FleetSSHSecurityGroup
    Properties:
      ImageId: !FindInMap [Linux, !Ref "AWS::Region", AMI]
      InstanceType: !Ref FleetInstanceSize
      KeyName: !Ref EC2KeyPair
      UserData:
        Fn::Base64: !Join ["", [
                        "#!/bin/bash\n",
                        "yum -y update\n",
                        "yum -y install aws-cfn-bootstrap\n",
                        "/opt/aws/bin/cfn-init -v",
                        " --stack ", !Ref "AWS::StackName",
                        " --resource LinuxEC2Fleet2",
                        " --region ", !Ref "AWS::Region", 
                        "\n"
                    ]]
      IamInstanceProfile: !Ref EC2FleetInstanceProfile
      Tags:
        - Key: Name
          Value: EC2 Fleet
      NetworkInterfaces:
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          GroupSet:
            - Ref: FleetSSHSecurityGroup
          SubnetId:
            Ref: PrivateSubnet2

  FleetSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite o inbound de SSH para as EC2 das Fleets
      GroupName: linux-fleet-ssh
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref VpcCIDR
  
  FleetHTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite o inbound de HTTP para as EC2 das Fleets pelo ALB
      GroupName: linux-fleet-http
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: !Ref VpcCIDR

  CodeDeployRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      RoleName: CodeDeployRoleCustom

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: CodeDeployDesafioItau
      ComputePlatform: Server

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
        ApplicationName: 
          Ref: "CodeDeployApplication"
        DeploymentConfigName: CodeDeployDefault.OneAtATime
        DeploymentStyle:
          DeploymentType: IN_PLACE
          DeploymentOption: WITHOUT_TRAFFIC_CONTROL
        ServiceRoleArn: 
          Fn::GetAtt: [ "CodeDeployRole", Arn ]
        Ec2TagFilters:
          - Key: "Name"
            Value: "EC2 Fleet"
            Type: "KEY_AND_VALUE"

  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
  CodePipelineArtifactStoreBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - CodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - CodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              Bool:
                'aws:SecureTransport': false

  AppPipelineWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: e5bec94b34422bc09e86c75c61e3af300bf9ef5b
      Filters:
        - JsonPath: $.ref
          MatchEquals: 'refs/heads/{Branch}'
      TargetPipeline: !Ref AppPipeline
      TargetAction: SourceAction
      Name: AppPipelineWebhook
      TargetPipelineVersion: !GetAtt 
        - AppPipeline
        - Version
      RegisterWithThirdParty: true

  AppPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    DependsOn:
      - LinuxEC2Fleet1
    Properties:
      Name: github-desafio-itau-pipeline
      RoleArn: !GetAtt 
        - CodePipelineServiceRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                OAuthToken: e5bec94b34422bc09e86c75c61e3af300bf9ef5b
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Beta
          Actions:
            - Name: BetaAction
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AWS-CodePipeline-Service-3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'devicefarm:ListProjects'
                  - 'devicefarm:ListDevicePools'
                  - 'devicefarm:GetRun'
                  - 'devicefarm:GetUpload'
                  - 'devicefarm:CreateUpload'
                  - 'devicefarm:ScheduleRun'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'elasticbeanstalk:*'
                  - 'ec2:*'
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                  - 'rds:*'
                  - 'sqs:*'
                  - 'ecs:*'
                Resource: '*'

Outputs:
  VPC:
    Description: A Referencia da VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: Lista das subnets publicas
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: Lista das subnets privadas
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A referencia da subnet publica da AZ1
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A referencia da subnet publica da AZ2
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A referencia da subnet privada da AZ1
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A referencia da subnet privada da AZ1
    Value: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Description: SG basico sem regra
    Value: !Ref NoIngressSecurityGroup
  
  Bastion1PublicIP:
    Description: IP Publico da Bastion 1
    Value: !GetAtt LinuxBastionHost1.PublicIp

  Bastion2PublicIP:
    Description: IP Publico da Bastion 2
    Value: !GetAtt LinuxBastionHost2.PublicIp

  Fleet1PrivateIP:
    Description: IP Privado da EC2 1 da Fleet
    Value: !GetAtt LinuxEC2Fleet1.PrivateIp

  Fleet2PrivateIP:
    Description: IP Privado da EC2 2 da Fleet
    Condition: Fleet2
    Value: !GetAtt LinuxEC2Fleet2.PrivateIp


