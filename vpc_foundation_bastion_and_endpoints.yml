Description:  Este template foi puramente insipirado no Well-Architected Framework da AWS,
  visando suprir as necessidades do projeto-desafio para o Itau Unibanco.
  1-) A stack vai criar uma VPC, com duas subnets publicas e duas subnets privadas, distribuidas
  em duas AZ's.
  2-) Pra tornar as duas primeiras subnets publicas, a stack vai entregar um IGW. Este, apenas
  atrelado na Routing Table Publica.
  3-) Para o egress, vamos utilizar um NAT GW em cada subnet publica. Assim nao temos um unico ponto de falha.
  3.1-) Cada Routing Table das subnets privadas vai ter o destination 0.0.0.0/0 pro seu respectivo nat-gw (tem dois)
  4-) Vamos criar uma pequena Bastion em cada subnet publica, para permitir o acesso SSH e, a partir deste,
  poder cair em alguma outra EC2 em subnets privadas. ~~IMPORTANTE~~ Aqui sera necessario um key-pair.
  5-) Criaremos um VPC Endpoint (GW) para o servico do S3, ja que nao queremos acessar os buckets pela internet.


Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Configuracao do Ambiente"
        Parameters:
          - EnvironmentName
      -
        Label:
          default: "Configuracao da VPC"
        Parameters:
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
      -
        Label:
          default: "Configuracao das Bastions"
        Parameters:
          - EC2KeyPair
          - InstanceSize
          - PublicIP

    ParameterLabels:
      EnvironmentName:
        default: "Qual o nome do seu ambiente?"
      VpcCIDR:
        default: "Qual o CIDR da sua VPC?"
      PublicSubnet1CIDR:
        default: "Qual o CIDR da sua Subnet Publica da AZ1?"
      PublicSubnet2CIDR:
        default: "Qual o CIDR da sua Subnet Publica da AZ2?"
      PrivateSubnet1CIDR:
        default: "Qual o CIDR da sua Subnet Privada da AZ1?"
      PrivateSubnet2CIDR:
        default: "Qual o CIDR da sua Subnet Privada da AZ2?"
      EC2KeyPair:
        default: "Selecione o key-pai previamente criado"
      InstanceSize:
        default: "Selecione o tipo de instancia"
      PublicIP:
        default: "Defina o seu CIDR de Ingress para o SSH"

Parameters:
  EnvironmentName:
    Description: Um nome ou label para lastrear o seu ambiente completamente
    Type: String

  VpcCIDR:
    Description: CIDR da sua VPC (pode aceitar o Default)
    Type: String
    Default: 172.16.0.0/24

  PublicSubnet1CIDR:
    Description: CIDR da sua Subnet Publica da AZ1 (pode aceitar o Default)
    Type: String
    Default: 172.16.0.0/26

  PublicSubnet2CIDR:
    Description: CIDR da sua Subnet Publica da AZ2 (pode aceitar o Default)
    Type: String
    Default: 172.16.0.64/26

  PrivateSubnet1CIDR:
    Description: CIDR da sua Subnet Privada da AZ1 (pode aceitar o Default)
    Type: String
    Default: 172.16.0.128/26

  PrivateSubnet2CIDR:
    Description: CIDR da sua Subnet Privada da AZ2 (pode aceitar o Default)
    Type: String
    Default: 172.16.0.192/26

  EC2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Selecione o ec2 key-pair para as suas Bastions

  InstanceSize:
    Type: String
    Description: Selecione o instance size das Bastions
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large

  PublicIP:
    Description: CIDR de Inbound pro SSH (ex., 12.34.56.78/32)
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Valor precisa estar nesse formato <ip address>/<cidr>
      

# aws ssm get-parameters --names /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 --region <region>
Mappings:
  Linux:
    us-east-1:
      "AMI": "ami-0fc61db8544a617ed"
    us-east-2:
      "AMI": "ami-0e01ce4ee18447327"
    us-west-1:
      "AMI": "ami-09a7fe78668f1e2c0"
    us-west-2:
      "AMI": "ami-0ce21b51cb31a48b8"
    sa-east-1:
      "AMI": "ami-0b032e878a66c3b68"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  LinuxBastionHost1:
    Type: AWS::EC2::Instance
    DependsOn:
      - LinuxSSHSecurityGroup
    Properties:
      ImageId: !FindInMap [Linux, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceSize
      KeyName: !Ref EC2KeyPair
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion 1 (AZ1)
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: LinuxSSHSecurityGroup
          SubnetId:
            Ref: PublicSubnet1

  LinuxBastionHost2:
    Type: AWS::EC2::Instance
    DependsOn:
      - LinuxSSHSecurityGroup
    Properties:
      ImageId: !FindInMap [Linux, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceSize
      KeyName: !Ref EC2KeyPair
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion 2 (AZ2)
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: LinuxSSHSecurityGroup
          SubnetId:
            Ref: PublicSubnet2

  LinuxSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite o inbound de SSH para as Bastions
      GroupName: linux-bastion-ssh
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref PublicIP
  
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: '{
       "Version":"2012-10-17",
       "Statement":[{
         "Effect":"Allow",
         "Principal": "*",
         "Action":["s3:*"],
         "Resource":["arn:aws:s3:::*/*"]
       }]
      }'
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC

Outputs:
  VPC:
    Description: A Referencia da VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: Lista das subnets publicas
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: Lista das subnets privadas
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A referencia da subnet publica da AZ1
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A referencia da subnet publica da AZ2
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A referencia da subnet privada da AZ1
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A referencia da subnet privada da AZ1
    Value: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Description: SG basico sem regra
    Value: !Ref NoIngressSecurityGroup
  
  Bastion1PublicIP:
    Description: IP Publico da Bastion 1
    Value: !GetAtt LinuxBastionHost1.PublicIp

  Bastion2PublicIP:
    Description: IP Publico da Bastion 2
    Value: !GetAtt LinuxBastionHost2.PublicIp
